import type { NextPage } from 'next';
import Head from 'next/head';
import styles from 'styles/Home.module.css';
import { Header } from 'component/Header';
import { Footer } from 'component/Footer';
import { Body } from 'component/Body';
import { ChangeEventHandler, useRef, useState } from 'react';
import moment from 'moment';

interface Todos {
  id: number;
  label: string;
  isDone: boolean;
}

type Update = {
  update: boolean;
  id: number;
};

// 仮
type Items = {
  id: string;
  content: string;
  completed: boolean;
  execution_date: string | null;
}[];

// apiレスポンス
const data: { items: Items } = {
  items: [
    {
      id: 'id001',
      content: '買い物する',
      completed: false,
      execution_date: '2019-10-06 00:00:00',
    },
    {
      id: 'id002',
      content: '洗濯物を干す',
      completed: true,
      execution_date: null,
    },
    {
      id: 'id003',
      content: '明日する',
      completed: true,
      execution_date: moment().startOf('day').add({ days: 1 }).format(), // テスト用 常に明日の日付になる
    },
  ],
};

/*
  execution_dateが明日か検証して出し分ける
  明日なら「明日やる」
  明日じゃないなら「今日やる」
  ※ 過去はすべて今日やるタスク、明日以降の未来は扱わない。
  nullは「今度やる」
*/

// 明日か判別する、nullはそもそも入れさせない。
const validationTommorow = (data: string): boolean => {
  // 現在からみて明日を取得する
  const tomorrow = moment().startOf('day').add({ days: 1 }).format();
  // 引数がtomorrowと同じ日付か検証する
  return moment(data).isSame(tomorrow, 'day');
};

// UTCをJST日本標準時に変換する
const formatToJST = (UTCDate: string): string => moment.utc(UTCDate).local().format();

type TodosList = {
  label: string;
  color: string;
  todos: Items;
}[];

// フロントで扱いやすいように加工する
const todosList: TodosList = [
  {
    label: '今日やる',
    color: '#F43F5E',
    todos: [
      ...data.items.filter((item) => {
        const date = item.execution_date;
        // 明日じゃないなら入れる
        return date === null ? false : !validationTommorow(formatToJST(date));
      }),
    ],
  },
  {
    label: '明日やる',
    color: '#FB923C',
    todos: [
      ...data.items.filter((item) => {
        const date = item.execution_date;
        // 明日なら入れる
        return date === null ? false : validationTommorow(formatToJST(date));
      }),
    ],
  },
  {
    label: '今度やる',
    color: '#FBBF24',
    todos: [
      ...data.items.filter((item) => {
        // nullなら入れる
        return item.execution_date === null;
      }),
    ],
  },
];

const Home: NextPage = () => {
  const ref = useRef<HTMLInputElement>(null);
  const [text, setText] = useState('');
  const [todos, setTodos] = useState<Todos[]>([]);
  const [updateButton, setUpdateButton] = useState<Update>({ update: false, id: 0 });

  const toggle: ChangeEventHandler<HTMLInputElement> = (e) => {
    setTodos((prevTodos) => {
      return prevTodos.map((prevTodo) => {
        if (prevTodo.id === Number(e.target.value)) {
          return {
            ...prevTodo,
            isDone: !prevTodo.isDone,
          };
        }

        return prevTodo;
      });
    });
  };

  const input: ChangeEventHandler<HTMLInputElement> = (e) => {
    setText(e.target.value);
  };

  const add = () => {
    setTodos((prevTodos) => {
      return [...prevTodos, { id: Math.random(), label: text, isDone: false }];
    });
    setText('');
  };

  const remove = (index: number): void => {
    const newTodow = [...todos];
    newTodow.splice(index, 1);
    setTodos(newTodow);
  };

  const edit = (id: number): void => {
    setTodos((prevTodos) => {
      return prevTodos.map((prevTodo) => {
        if (prevTodo.id === id) {
          ref.current?.focus();
          setText(prevTodo.label);
          setUpdateButton({ update: true, id: prevTodo.id });
        }
        return { ...prevTodo };
      });
    });
  };

  const update = () => {
    setTodos((prevTodos) => {
      return prevTodos.map((prevTodo) => {
        if (prevTodo.id === updateButton.id) {
          return {
            ...prevTodo,
            label: text,
          };
        }
        return prevTodo;
      });
    });
    setUpdateButton({ update: false, id: 0 });
    setText('');
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <Header></Header>

      <Body>
        {/* 出しわけ出来次第削除予定
        <ul>
          {todos.map((todo, index) => (
            <li key={todo.id}>
              <input type='checkbox' value={todo.id} onChange={toggle} checked={todo.isDone} />
              <button onClick={() => edit(todo.id)}>{todo.label}</button>
              <button className='border border-red-500' onClick={() => remove(index)}>
                削除
              </button>
            </li>
          ))}
          <li className={todos.length ? 'hidden md:block' : ''}>
            <button onClick={() => ref.current?.focus()}>タスクを追加する</button>
          </li>
        </ul> */}

        {todosList.map((todosItem, index) => (
          <section key={index}>
            <h2>{todosItem.label}</h2>
            <ul>
              {todosItem.todos.map((todo) => (
                <li key={todo.id}>
                  <input type='checkbox' />
                  <button>{todo.content}</button>
                  <button>削除</button>
                </li>
              ))}
              <li className={todosItem.todos.length ? 'hidden md:block' : ''}>
                <button onClick={() => ref.current?.focus()}>タスクを追加する</button>
              </li>
            </ul>
          </section>
        ))}
      </Body>

      <Footer>
        <div>
          <input className='border border-gray' value={text} onChange={input} ref={ref} type='text' />
          <button onClick={() => (updateButton.update ? update() : add())}>追加</button>
        </div>
      </Footer>
    </div>
  );
};

export default Home;
