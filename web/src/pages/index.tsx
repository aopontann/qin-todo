import type { NextPage } from 'next';
import Head from 'next/head';
import { Header } from 'component/Header';
import { Footer } from 'component/Footer';
import { Body } from 'component/Body';
import { useEffect, useRef, useState } from 'react';
import { addDays } from 'date-fns';
import { formatInTimeZone } from 'date-fns-tz';
import { useTodoContext } from 'context/TodoContext';
import { TodosList } from 'component/TodosList';
import { TodoInput } from 'component/TodoInput';
import { useUserContext } from 'context/UserContext';
import { useRouter } from 'next/router';

type Items = {
  id: string;
  content: string;
  completed: boolean;
  execution_date: {
    String: string;
    valid: boolean;
  };
}[];

const Home: NextPage = () => {
  const { data, setData, handleTodosList } = useTodoContext();
  const [footerHeight, setFooterHeight] = useState(0);
  const footerRef = useRef<HTMLElement>(null);
  const { setUser } = useUserContext();

  const router = useRouter();

  // APIを叩く処理の予定
  useEffect(() => {
    const param: RequestInit = {
      method: 'GET',
      credentials: 'include',
      headers: {
        'Content-Type': 'application/json; charset=utf-8',
        Accept: 'application/json',
      },
    };

    fetch('/users', param)
      .then((res) => res.json())
      .then((res) => {
        if (!res.error) {
          setUser(res);
          return false;
        }
        router.push('/login');
        return false;
      });
  }, []);

  // タスクが増減するたびにフロント用の配列を作成
  useEffect(() => handleTodosList(), [data]);

  useEffect(() => {
    const param: RequestInit = {
      method: 'POST',
      credentials: 'include',
      headers: {
        'Content-Type': 'application/json; charset=utf-8',
        Accept: 'application/json',
      },
    };

    fetch('/todos', param)
      .then((res) => res.json())
      .then((res) => {
        if (!res.error) {
          setData(res.items);
        }
      });
  }, []);

  // footerの高さを取得してタスクが多くなった場合に最下部のタスクがinputに埋もれないように
  useEffect(() => {
    const resizeObserver = new ResizeObserver(() => {
      if (footerRef.current?.clientHeight != undefined) {
        setFooterHeight(footerRef?.current?.clientHeight);
      }
    });

    footerRef.current && resizeObserver.observe(footerRef.current);

    return () => {
      resizeObserver.disconnect();
    };
  }, [footerHeight]);

  const onLogout = () => {
    const param = {
      method: 'POST',
      credentials: 'include',
      headers: {
        'Content-Type': 'application/json; charset=utf-8',
        Accept: 'application/json',
      },
    };
    fetch('/auth/logout', param).then((res) => console.log(res));
  };

  return (
    <div className='px-6' style={{ paddingBottom: `calc(2rem + ${footerHeight + 'px'})` }}>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width,initial-scale=1.0,maximum-scale=1.0'></meta>
        <link rel='icon' href='/favicon.ico' />
      </Head>

      {/* <div className='flex justify-between'>
        <button onClick={onLogin}>ログインする</button>
        <button onClick={onLogout}>ログアウトする</button>
        <button
          onClick={() => {
            const param = {
              method: 'GET',
              credentials: 'include',
              headers: {
                'Content-Type': 'application/json; charset=utf-8',
                Accept: 'application/json',
              },
            };
            fetch('/todos', param)
              .then((res) => res.json())
              .then((res) => console.log(res));
          }}
        >
          todos
        </button>
        <button
          onClick={() => {
            const param = {
              method: 'GET',
              credentials: 'include',
              headers: {
                'Content-Type': 'application/json; charset=utf-8',
                Accept: 'application/json',
              },
            };
            fetch('/users', param)
              .then((res) => res.json())
              .then((res) => console.log(res));
          }}
        >
          ユーザー情報
        </button>
        <button
          onClick={() => {
            const hoge = {
              content: 'test1@example.com',
              execution_date: '2020-12-25 00:00:00',
            };

            const param = {
              method: 'POST',
              credentials: 'include',
              headers: {
                'Content-Type': 'application/json; charset=utf-8',
                Accept: 'application/json',
              },
              body: JSON.stringify(hoge),
            };
            fetch('/todos', param).then((res) => console.log(res));
          }}
        >
          追加
        </button>
      </div> */}
      <Header></Header>

      <Body>
        <TodosList />
      </Body>

      <Footer _ref={footerRef}>
        <TodoInput />
      </Footer>
    </div>
  );
};

export default Home;
